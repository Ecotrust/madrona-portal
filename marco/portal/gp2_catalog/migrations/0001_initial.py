# Generated by Django 3.2.12 on 2022-03-01 23:36

from django.db import migrations, models
import django.db.models.deletion
import portal.gp2_catalog.models
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0002_auto_20211207_0009'),
        ('grid_pages', '0006_alter_gridpagesection_id'),
        ('wagtailcore', '0066_collection_management_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CatalogIframePage',
            fields=[
                ('source', models.URLField(max_length=1999)),
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='gp2_CatalogIframePage', serialize=False, to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='CatalogThemeGridPage',
            fields=[
                ('gridpage_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='gp2_CatalogThemeGridPage', serialize=False, to='grid_pages.gridpage')),
            ],
            options={
                'abstract': False,
            },
            bases=('grid_pages.gridpage',),
        ),
        migrations.CreateModel(
            name='CatalogThemeGridPageDetail',
            fields=[
                ('theme', models.CharField(blank=True, max_length=255, null=True)),
                ('gridpagedetail_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='gp2_CatalogThemeGridPageDetail', serialize=False, to='grid_pages.gridpagedetail')),
            ],
            options={
                'abstract': False,
            },
            bases=('grid_pages.gridpagedetail',),
        ),
        migrations.CreateModel(
            name='CTAPage',
            fields=[
                ('body', wagtail.fields.StreamField([('item', wagtail.blocks.StructBlock([('cta_title', wagtail.blocks.CharBlock(required=False)), ('cta_content', wagtail.blocks.RichTextBlock(required=False)), ('cta_page', wagtail.blocks.PageChooserBlock(label='page', required=False)), ('cta_link', wagtail.blocks.URLBlock(label='URL', required=False)), ('width', wagtail.blocks.IntegerBlock(help_text='Number of columns to span out of 12 (e.g., input of 3 would mean give this a width of 3 out of the 12 (25%))', max_value=12, min_value=0, required=False)), ('text_color', wagtail.blocks.ChoiceBlock(choices=[('white', 'White'), ('black', 'Black'), ('blue', 'Blue'), ('green', 'Green'), ('red', 'Red'), ('purple', 'Purple'), ('grey', 'Grey')], icon='color_palette', required=False)), ('background_color', wagtail.blocks.ChoiceBlock(choices=[('white', 'White'), ('black', 'Black'), ('blue', 'Blue'), ('green', 'Green'), ('red', 'Red'), ('purple', 'Purple'), ('grey', 'Grey')], icon='color', required=False)), ('background_image', wagtail.images.blocks.ImageChooserBlock(required=False))])), ('details', wagtail.blocks.RichTextBlock()), ('row', portal.gp2_catalog.models.CTARowDivider())])),
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='gp2_CTAPage', serialize=False, to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ConnectPage',
            fields=[
                ('grid_cta_one_title', models.CharField(blank=True, max_length=255, null=True)),
                ('grid_cta_one', models.CharField(blank=True, max_length=255, null=True)),
                ('grid_cta_two_title', models.CharField(blank=True, max_length=255, null=True)),
                ('grid_cta_two', models.CharField(blank=True, max_length=255, null=True)),
                ('grid_cta_three_title', models.CharField(blank=True, max_length=255, null=True)),
                ('grid_cta_three', models.CharField(blank=True, max_length=255, null=True)),
                ('body', wagtail.fields.RichTextField()),
                ('cta_list', wagtail.fields.StreamField([('connection', wagtail.blocks.StructBlock([('cta_title', wagtail.blocks.CharBlock(required=False)), ('cta_content', wagtail.blocks.RichTextBlock(required=False)), ('cta_page', wagtail.blocks.PageChooserBlock(label='page', required=False)), ('cta_link', wagtail.blocks.URLBlock(label='URL', required=False)), ('width', wagtail.blocks.IntegerBlock(help_text='Number of columns to span out of 12 (e.g., input of 3 would mean give this a width of 3 out of the 12 (25%))', max_value=12, min_value=0, required=False)), ('text_color', wagtail.blocks.ChoiceBlock(choices=[('white', 'White'), ('black', 'Black'), ('blue', 'Blue'), ('green', 'Green'), ('red', 'Red'), ('purple', 'Purple'), ('grey', 'Grey')], icon='color_palette', required=False)), ('background_color', wagtail.blocks.ChoiceBlock(choices=[('white', 'White'), ('black', 'Black'), ('blue', 'Blue'), ('green', 'Green'), ('red', 'Red'), ('purple', 'Purple'), ('grey', 'Grey')], icon='color', required=False)), ('background_image', wagtail.images.blocks.ImageChooserBlock(required=False))])), ('details', wagtail.blocks.RichTextBlock())])),
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='gp2_ConnectPage', serialize=False, to='wagtailcore.page')),
                ('body_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.portalimage')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
    ]
