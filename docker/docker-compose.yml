version: '3.7'

services:
  app:
    build:
      context: ../
    # command: dockerize -wait tcp://db:5432 sh -c "python manage.py migrate --noinput"
    # command: dockerize -wait tcp://db:5432 sh -c "python manage.py loaddata /usr/local/apps/TEKDB/TEKDB/TEKDB/fixtures/all_dummy_data.json"
    volumes:
      - static_data:/vol/web
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_DATABASE=${SQL_DATABASE}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${SQL_PASSWORD}
      - SQL_HOST=${SQL_HOST}
      - SQL_PORT=${SQL_PORT}
      - PROJ_DIR=${PROJ_DIR}
    depends_on:
      - ${SQL_HOST}
    links:
      - ${SQL_HOST}
    ports:
      - "8000:8000"
    networks:
      - djangonetwork

  # proxy:
  #   build:
  #     context: ../../proxy
  #   volumes:
  #     - static_data:/vol/static
  #     # - media_data:/vol/media
  #   ports:
  #     - "${PROXY_PORT}:8080"
  #   depends_on:
  #     - app
  #   networks:
  #     - djangonetwork

  db:
    image: postgis/postgis:14-3.1-alpine
    volumes:
      - postgis-data:/var/lib/postgresql
    environment:
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_DB=${SQL_DATABASE}
    ports:
      - ${SQL_PORT}:5432
    networks:
      - djangonetwork

  tasks:
    image: redis:alpine3.14
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - ${TASK_PORT}:6379
    volumes:
      - redis-data:/var/lib/redis
      - redis.conf:/usr/local/etc/redis/redis.conf

    environment:
     - REDIS_REPLICATION_MODE=master
    networks:
      - djangonetwork

volumes:
  postgis-data:
  static_data:
  redis-data:
  redis.conf:
  # media_data:

networks:
  djangonetwork:
    driver: bridge
